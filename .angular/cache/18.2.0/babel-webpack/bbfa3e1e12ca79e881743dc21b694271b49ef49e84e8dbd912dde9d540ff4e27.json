{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.prod\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// This service provides methods to interact with the payment API.\nexport class ApiService {\n  http;\n  authStatuschanged = new EventEmitter();\n  static BASE_URL = environment.baseUrl;\n  constructor(http) {\n    this.http = http;\n  }\n  getHeader() {\n    const token = localStorage.getItem(\"token\");\n    return new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n  }\n  // ***PAYMENT API METHODS***\n  // Create a payment (POST)\n  createPayment(payment) {\n    return this.http.post(`${ApiService.BASE_URL}/api/payments`, payment, {\n      headers: this.getHeader()\n    });\n  }\n  // Get all payments (GET)\n  getAllPayments() {\n    return this.http.get(`${ApiService.BASE_URL}/api/payments`, {\n      headers: this.getHeader()\n    });\n  }\n  // Get payment by ID (GET)\n  getPaymentById(paymentId) {\n    return this.http.get(`${ApiService.BASE_URL}/api/payments/${paymentId}`, {\n      headers: this.getHeader()\n    });\n  }\n  // Update payment (PUT)\n  updatePayment(paymentId, payment) {\n    return this.http.put(`${ApiService.BASE_URL}/api/payments/${paymentId}`, payment, {\n      headers: this.getHeader()\n    });\n  }\n  // Delete payment (DELETE)\n  deletePayment(paymentId) {\n    return this.http.delete(`${ApiService.BASE_URL}/api/payments/${paymentId}`, {\n      headers: this.getHeader()\n    });\n  }\n  /***AUTH & USERS API METHODS */\n  registerUser(registration) {\n    return this.http.post(`${ApiService.BASE_URL}/auth/register`, registration);\n  }\n  loginUser(loginDetails) {\n    return this.http.post(`${ApiService.BASE_URL}/auth/login`, loginDetails);\n  }\n  getLoggedInUserInfo() {\n    return this.http.get(`${ApiService.BASE_URL}/user/my-info`, {\n      headers: this.getHeader()\n    });\n  }\n  /***PRODUCTS API */\n  addProduct(formData) {\n    return this.http.post(`${ApiService.BASE_URL}/product/create`, formData, {\n      headers: this.getHeader()\n    });\n  }\n  updateProduct(formData) {\n    return this.http.put(`${ApiService.BASE_URL}/product/update`, formData, {\n      headers: this.getHeader()\n    });\n  }\n  getAllProducts() {\n    return this.http.get(`${ApiService.BASE_URL}/product/get-all`);\n  }\n  searchProducts(searchValue) {\n    return this.http.get(`${ApiService.BASE_URL}/product/search`, {\n      params: {\n        searchValue\n      }\n    });\n  }\n  getAllProductsByCategotyId(categoryId) {\n    return this.http.get(`${ApiService.BASE_URL}/product/get-by-category-id/${categoryId}`);\n  }\n  getProductById(productId) {\n    return this.http.get(`${ApiService.BASE_URL}/product/get-by-product-id/${productId}`);\n  }\n  deletProduct(productId) {\n    return this.http.delete(`${ApiService.BASE_URL}/product/delete/${productId}`, {\n      headers: this.getHeader()\n    });\n  }\n  /**CATEGOTY API */\n  createCategory(body) {\n    return this.http.post(`${ApiService.BASE_URL}/category/create`, body, {\n      headers: this.getHeader()\n    });\n  }\n  getAllCategory() {\n    return this.http.get(`${ApiService.BASE_URL}/category/get-all`);\n  }\n  getCategoryById(categoryId) {\n    return this.http.get(`${ApiService.BASE_URL}/category/get-category-by-id/${categoryId}`);\n  }\n  updateCategory(categoryId, body) {\n    return this.http.put(`${ApiService.BASE_URL}/category/update/${categoryId}`, body, {\n      headers: this.getHeader()\n    });\n  }\n  deleteCategory(categoryId) {\n    return this.http.delete(`${ApiService.BASE_URL}/category/delete/${categoryId}`, {\n      headers: this.getHeader()\n    });\n  }\n  /**ORDER API */\n  createOrder(body) {\n    return this.http.post(`${ApiService.BASE_URL}/order/create`, body, {\n      headers: this.getHeader()\n    });\n  }\n  getAllOrders() {\n    return this.http.get(`${ApiService.BASE_URL}/order/filter`, {\n      headers: this.getHeader()\n    });\n  }\n  getOrderItemById(itemId) {\n    return this.http.get(`${ApiService.BASE_URL}/order/filter`, {\n      headers: this.getHeader(),\n      params: {\n        itemId\n      }\n    });\n  }\n  getAllOrderItemsByStatus(status) {\n    return this.http.get(`${ApiService.BASE_URL}/order/filter`, {\n      headers: this.getHeader(),\n      params: {\n        status\n      }\n    });\n  }\n  updateOrderItemStatus(orderItemId, status) {\n    return this.http.put(`${ApiService.BASE_URL}/order/update-item-status/${orderItemId}`, {}, {\n      headers: this.getHeader(),\n      params: {\n        status\n      }\n    });\n  }\n  /**ADDRESS  */\n  saveAddress(body) {\n    return this.http.post(`${ApiService.BASE_URL}/address/save`, body, {\n      headers: this.getHeader()\n    });\n  }\n  /**AUTHENTICATION */\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"role\");\n  }\n  isAuthenticated() {\n    const token = localStorage.getItem(\"token\");\n    return !!token;\n  }\n  isAdmin() {\n    const role = localStorage.getItem(\"role\");\n    return role === \"ADMIN\";\n  }\n  static ɵfac = function ApiService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}