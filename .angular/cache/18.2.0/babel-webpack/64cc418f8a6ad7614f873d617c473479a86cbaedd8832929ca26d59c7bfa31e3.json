{"ast":null,"code":"import { CommonModule } from \"@angular/common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/api.service\";\nimport * as i2 from \"../service/cart.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction CartComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.message);\n  }\n}\nfunction CartComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Your cart is empty\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction CartComponent_div_5_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 8);\n    i0.ɵɵelement(1, \"img\", 9);\n    i0.ɵɵelementStart(2, \"div\")(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"span\", 10);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 11)(10, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function CartComponent_div_5_li_2_Template_button_click_10_listener() {\n      const item_r4 = i0.ɵɵrestoreView(_r3).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.decrementItem(item_r4.id));\n    });\n    i0.ɵɵtext(11, \"-\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"span\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function CartComponent_div_5_li_2_Template_button_click_14_listener() {\n      const item_r4 = i0.ɵɵrestoreView(_r3).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.incrementItem(item_r4.id));\n    });\n    i0.ɵɵtext(15, \"+\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", item_r4.imageUrl, i0.ɵɵsanitizeUrl)(\"alt\", item_r4.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r4.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r4.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"$\", item_r4.price.toFixed(2), \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(item_r4.quantity);\n  }\n}\nfunction CartComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"ul\");\n    i0.ɵɵtemplate(2, CartComponent_div_5_li_2_Template, 16, 6, \"li\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"h2\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 6);\n    i0.ɵɵelementStart(6, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function CartComponent_div_5_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.clearCart());\n    });\n    i0.ɵɵtext(7, \"Clear Cart\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.cart);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Total: $\", ctx_r0.totalPrice.toFixed(2), \"\");\n  }\n}\nexport let CartComponent = /*#__PURE__*/(() => {\n  class CartComponent {\n    apiService;\n    cartService;\n    router;\n    cart = [];\n    message = null;\n    totalPrice = 0;\n    isCartEmpty = true;\n    userId = 1; // Assume userId comes from session storage or login context\n    constructor(apiService, cartService, router) {\n      this.apiService = apiService;\n      this.cartService = cartService;\n      this.router = router;\n    }\n    ngOnInit() {\n      this.loadCart();\n    }\n    ngAfterViewInit() {\n      if (!this.isCartEmpty) {\n        this.initializePayPal();\n      }\n    }\n    loadCart() {\n      this.cart = this.cartService.getCart();\n      this.calculateTotalPrice();\n      this.isCartEmpty = this.cart.length === 0;\n    }\n    calculateTotalPrice() {\n      this.totalPrice = this.cart.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n    incrementItem(itemId) {\n      this.cartService.incrementItem(itemId);\n      this.loadCart();\n    }\n    decrementItem(itemId) {\n      this.cartService.decrementItem(itemId);\n      this.loadCart();\n    }\n    removeItem(itemId) {\n      this.cartService.removeItem(itemId);\n      this.loadCart();\n    }\n    clearCart() {\n      this.cartService.clearCart();\n      this.loadCart();\n    }\n    // Handle order placement (without PayPal, using API)\n    handleCheckOut() {\n      if (!this.apiService.isAuthenticated()) {\n        this.message = \"You need to log in before you can place an order.\";\n        setTimeout(() => {\n          this.message = null;\n          this.router.navigate(['/login']);\n        }, 3000);\n        return;\n      }\n      const orderItems = this.cart.map(item => ({\n        productId: item.id,\n        quantity: item.quantity\n      }));\n      const orderRequest = {\n        totalPrice: this.totalPrice,\n        items: orderItems\n      };\n      this.apiService.createOrder(orderRequest).subscribe({\n        next: response => {\n          this.message = response.message;\n          if (response.status === 200) {\n            this.cartService.clearCart();\n            this.loadCart();\n          }\n        },\n        error: error => {\n          console.log(error);\n          this.message = error?.error?.message || \"Unable to place the order.\";\n        }\n      });\n    }\n    // Initialize PayPal button\n    initializePayPal() {\n      const PAYPAL_SCRIPT_ID = \"paypal-jssdk\";\n      const PAYPAL_SCRIPT_URL = \"https://www.paypal.com/sdk/js?client-id=AeZBeO50BgYNw7e_mJ1QtcVjF24FNdQdoSQSOpGgrd9EZuPdgM6t2agYyR0DsA6aREmAkH3nxm0LvgJu\";\n      if (!document.getElementById(PAYPAL_SCRIPT_ID)) {\n        const script = document.createElement(\"script\");\n        script.id = PAYPAL_SCRIPT_ID;\n        script.src = PAYPAL_SCRIPT_URL;\n        script.onload = () => this.renderPayPalButton();\n        document.body.appendChild(script);\n      } else {\n        this.renderPayPalButton();\n      }\n    }\n    renderPayPalButton() {\n      if (this.totalPrice <= 0) {\n        this.message = \"The total price is invalid. Please add items to your cart.\";\n        return;\n      }\n      paypal.Buttons({\n        createOrder: (data, actions) => {\n          console.log(\"Creating order with amount:\", this.totalPrice);\n          return actions.order.create({\n            purchase_units: [{\n              amount: {\n                value: this.totalPrice.toFixed(2)\n              }\n            }]\n          }).catch(err => {\n            console.error(\"Error during order creation:\", err);\n            this.message = \"An error occurred while creating the order. Please try again.\";\n          });\n        },\n        onApprove: (data, actions) => {\n          return actions.order.capture().then(details => {\n            console.log(\"Payment captured:\", details);\n            if (details.status === \"COMPLETED\") {\n              const order = {\n                userId: this.userId,\n                items: this.cart.map(item => ({\n                  productId: item.id,\n                  quantity: item.quantity,\n                  price: item.price\n                })),\n                payment: {\n                  paymentMethod: \"PayPal\",\n                  paymentStatus: \"Completed\",\n                  amount: this.totalPrice,\n                  transactionId: details.id,\n                  paymentDate: new Date().toISOString()\n                }\n              };\n              // Make API call to create order in the database\n              this.apiService.createOrder(order).subscribe(response => {\n                console.log('Order created successfully:', response);\n                this.message = `Payment successful! Order ID: ${response.id}. Thank you, ${details.payer.name.given_name}.`;\n                this.clearCart(); // Clear the cart after successful order\n              }, error => {\n                console.error(\"Error creating order:\", error);\n                this.message = \"Failed to create the order. Please contact support.\";\n              });\n            } else {\n              this.message = \"Payment was not successful. Please try again.\";\n            }\n          }).catch(err => {\n            console.error(\"Payment capture failed:\", err);\n            this.message = \"An error occurred while capturing the payment. Please try again.\";\n          });\n        },\n        onError: err => {\n          console.error(\"PayPal Checkout Error:\", err);\n          this.message = \"An error occurred during the payment process. Please try again later.\";\n        }\n      }).render(\"#paypal-button-container\");\n    }\n    static ɵfac = function CartComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CartComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.CartService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CartComponent,\n      selectors: [[\"app-cart\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 6,\n      vars: 3,\n      consts: [[1, \"container\"], [2, \"text-align\", \"center\"], [\"class\", \"message\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"message\"], [\"class\", \"item\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"paypal-button-container\"], [1, \"clear\", 3, \"click\"], [1, \"item\"], [3, \"src\", \"alt\"], [1, \"price\"], [1, \"controls\"], [3, \"click\"]],\n      template: function CartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n          i0.ɵɵtext(2, \"My Cart\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, CartComponent_p_3_Template, 2, 1, \"p\", 2)(4, CartComponent_div_4_Template, 3, 0, \"div\", 3)(5, CartComponent_div_5_Template, 8, 2, \"div\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.message);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.cart.length === 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.cart.length > 0);\n        }\n      },\n      dependencies: [CommonModule, i4.NgForOf, i4.NgIf],\n      styles: [\".container[_ngcontent-%COMP%]{max-width:900px;margin:80px auto;padding:20px;box-shadow:2px 2px 4px 4px #0000001a;border-radius:10px;margin-bottom:9rem}.message[_ngcontent-%COMP%]{text-align:center;color:#f68b1e;margin-bottom:20xp;font-size:1.1rem}.item[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:15px 0;border-bottom:1px solid #ddd}img[_ngcontent-%COMP%]{width:100px;height:auto;border-radius:8px;box-shadow:2px 2px 4px 4px #0000001a}.item[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{flex-grow:1;margin-left:20px}.item[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:1.4rem;color:#555}.item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:.9rem;color:#777;margin:10px 0}.controls[_ngcontent-%COMP%]{display:flex;align-items:center;margin-top:10px}.controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:#f68b1e;color:#fff;border:none;padding:5px 10px;font-size:1.2rem;border-radius:5px;cursor:pointer;transition:background-color .3s}.controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background:linear-gradient(to right,#c1d6c1,#115611)}.controls[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:1.2rem;margin:0 15px}.price[_ngcontent-%COMP%]{font-size:1.4rem;color:#333;font-weight:700}.container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]:last-child{text-align:right;font-size:1.6rem;color:#333;margin-top:20px}.checkout[_ngcontent-%COMP%], .clear[_ngcontent-%COMP%]{display:block;width:100%;padding:15px;margin:20px auto;border:none;border-radius:5px;cursor:pointer;color:#fff;font-size:22px;transition:background-color .3s,transform .3s}.checkout[_ngcontent-%COMP%]{background-color:#f68b1e}.clear[_ngcontent-%COMP%]{background-color:#999}.checkout[_ngcontent-%COMP%]:hover{background-color:#b5885b}.clear[_ngcontent-%COMP%]:hover{background-color:#b88a8a}.container[_ngcontent-%COMP%]   #paypal-button-container[_ngcontent-%COMP%]{margin:20px 20px 40px 80px;transform:scale(1.2);transition:transform .3s}\"]\n    });\n  }\n  return CartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}